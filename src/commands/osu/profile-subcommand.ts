import axios from 'axios';
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChatInputCommandInteraction,
  EmbedBuilder,
  SlashCommandSubcommandBuilder,
  time,
} from 'discord.js';
import { ExtendedClient } from '../../client/ExtendedClient';
import {
  osuProfile,
  secondsToDhm,
  getOsuClientToken,
  numberWithSpaces,
  checkUserAcessToken,
} from '../../utils';

export const data = (subcommand: SlashCommandSubcommandBuilder) => {
  return subcommand
    .setName('profile')
    .setDescription('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π osu!–ø—Ä–æ—Ñ–∏–ª—å')
    .addStringOption((option) =>
      option
        .setName('username')
        .setRequired(false)
        .setDescription('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–π-—Ç–æ –¥—Ä—É–≥–æ–π osu! –ø—Ä–æ—Ñ–∏–ª—å')
    )
    .addStringOption((option) =>
      option
        .setName('server')
        .setRequired(false)
        .setDescription('–í—ã–±—Ä–∞—Ç—å osu! —Å–µ—Ä–≤–µ—Ä')
        .addChoices(
          { name: 'bancho', value: 'bancho' },
          { name: 'gatari', value: 'gatari' }
        )
    );
};

export async function execute(
  interaction: ChatInputCommandInteraction,
  client: ExtendedClient
) {
  const getInputUsername = interaction.options.getString('username');
  const getInputServer = interaction.options.getString('server');
  const getUserAcessToken = await checkUserAcessToken(
    interaction.user.id,
    await client.getOsuAccount(interaction.user.id)
  );
  if (!getInputUsername && !getUserAcessToken) {
    const loginUrlButton = new ActionRowBuilder<ButtonBuilder>().setComponents(
      new ButtonBuilder()
        .setURL(client.ngrokUrl)
        .setLabel('üìã –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
        .setStyle(ButtonStyle.Link)
    );
    const needToLogin = new EmbedBuilder()
      .setTitle('üçú –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
      .setDescription(
        `–î–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!\n` +
          `–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤–≤–µ–¥—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –∫–æ–º–∞–Ω–¥—ã –≤–∞—à –Ω–∏–∫–Ω–µ–π–º`
      );
    interaction.reply({
      embeds: [needToLogin],
      components: [loginUrlButton],
      ephemeral: true,
    });
    return;
  }

  /*   TODO: Implement gatari server profiles 
  Docs: https://osu.gatari.pw/docs/api */
  if (getInputServer === 'gatari' && getInputUsername) {
    await interaction.reply({
      content: 'ü™¥ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ...',
      ephemeral: true,
    });
    return;
  }

  if (getInputUsername) {
    await axios
      .get<osuProfile>(
        `https://osu.ppy.sh/api/v2/users/${getInputUsername}/osu`,
        {
          params: {
            key: 'user',
          },
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `Bearer ${await getOsuClientToken()}`,
          },
        }
      )
      .then(async (response) => {
        await interaction.reply({
          embeds: [jsonProfileToEmbed(response.data)],
        });
      })
      .catch(async () => {
        await interaction.reply({
          content: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!',
          ephemeral: true,
        });
      });
    return;
  }

  if (getUserAcessToken) {
    const userProfileJSON = await axios.get<osuProfile>(
      //TODO: Add custom default modes
      `https://osu.ppy.sh/api/v2/me/osu`,
      {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          Authorization: `Bearer ${getUserAcessToken}`,
        },
      }
    );
    await interaction.reply({
      embeds: [jsonProfileToEmbed(userProfileJSON.data)],
    });
    return;
  }
}

//TODO: Redesign later
function jsonProfileToEmbed(profile: osuProfile) {
  const profileEmbed = new EmbedBuilder()
    .setAuthor({
      name: `–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ ${profile.username}${
        profile.is_supporter ? ' ‚ú®' : ''
      }`,
      iconURL: profile.avatar_url,
      url: 'https://osu.ppy.sh/users/' + profile.id,
    })
    .setColor('NotQuiteBlack')
    .setImage(profile.cover_url)
    .setDescription(
      `–°—Ç–∞—Ç—É—Å: ${
        profile.is_online
          ? 'üåø **–í —Å–µ—Ç–∏!**'
          : `üçÇ **–û—Ñ—Ñ–ª–∞–π–Ω!**\n–ë—ã–ª –≤ —Å–µ—Ç–∏: **${
              profile.last_visit
                ? time(new Date(profile.last_visit).getTime() / 1000, 'R')
                : '–ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö!'
            }**`
      }\n` +
        `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: **${time(
          new Date(profile.join_date).getTime() / 1000,
          'D'
        )}**
        ${
          profile.statistics.global_rank
            ? `–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ Bancho!: **#${numberWithSpaces(
                profile.statistics.global_rank
              )} (:flag_${profile.country_code.toLowerCase()}:: #${numberWithSpaces(
                profile.statistics.country_rank
              )})**`
            : `–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ Bancho!: **–ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö!**`
        }`
    )
    .setFields(
      {
        name: '–ú–µ–¥–∞–ª–µ–π üèÜ',
        value: `**${profile.user_achievements.length}**`,
        inline: true,
      },
      {
        name: 'PP üìà',
        value: `**${Math.floor(profile.statistics.pp)}**`,
        inline: true,
      },
      {
        name: '–í—Ä–µ–º–µ–Ω–∏ –≤ –∏–≥—Ä–µ ‚åõ',
        value: `**${secondsToDhm(profile.statistics.play_time)} (${Math.round(
          profile.statistics.play_time / 3600
        )} hrs)**`,
        inline: true,
      },
      {
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä',
        value: `–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏:\n‚îî‚îÄ‚îÄ **${numberWithSpaces(
          profile.statistics.ranked_score
        )}**\n –ê–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å: **${numberWithSpaces(
          profile.statistics.hit_accuracy.toString().slice(0, 5)
        )}%**\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: **${numberWithSpaces(
          profile.statistics.play_count
        )}**`,
        inline: true,
      },
      {
        name: '–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üñáÔ∏è',
        value: `${
          profile.location ? `üìç **${profile.location}**` : `üìç *–ù–µ —É–∫–∞–∑–∞–Ω–æ*`
        }\n ${
          profile.interests ? `‚ù§Ô∏è **${profile.interests}**` : `‚ù§Ô∏è *–ù–µ —É–∫–∞–∑–∞–Ω–æ*`
        }\n ${
          profile.occupation
            ? `üíº **${profile.occupation}**`
            : `üíº *–ù–µ —É–∫–∞–∑–∞–Ω–æ*`
        }`,
        inline: true,
      }
    );

  return profileEmbed;
}
