import {
  SlashCommandBuilder,
  bold,
  time,
  inlineCode,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChatInputCommandInteraction,
  EmbedBuilder,
  AttachmentBuilder,
} from 'discord.js';
import os from 'os';
import { ExtendedClient } from '../../client/ExtendedClient';
import ngrok from 'ngrok';
import axios from 'axios';
import config from '../../config';
import path from 'path';

export const data = new SlashCommandBuilder()
  .setName('status')
  .setDescription(`Bot's status`);

const buttonsRow = new ActionRowBuilder<ButtonBuilder>().setComponents(
  //Note: Doesn't sure if I want to implement this feature, disabled for now
  new ButtonBuilder()
    .setCustomId('createTicket')
    .setLabel('üì® –°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ')
    .setStyle(ButtonStyle.Secondary)
    .setDisabled(true),
  new ButtonBuilder()
    .setURL('https://github.com/richardscull/RichardsCoffeeShop')
    .setLabel('üìÇ GitHub')
    .setStyle(ButtonStyle.Link)
);

const imgForEmbed = new AttachmentBuilder(
  path.join(__dirname, '..', '..', '..', 'images', 'statusEmbed.png'),
  { name: 'statusEmbed.png' }
);

export async function execute(
  interaction: ChatInputCommandInteraction,
  client: ExtendedClient
) {
  const guildsCached = client.guilds.cache.size.toString();
  const usersInGuilds = client.guilds.cache
    .reduce((acc, guild) => acc + guild.memberCount, 0)
    .toString();

  const statusEmbed = new EmbedBuilder()
    .setAuthor({
      name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –±–æ—Ç–∞',
      iconURL: client.user?.displayAvatarURL(),
    })
    .setColor('NotQuiteBlack')
    .setTitle(`> "_${client.user?.username}_"`)
    .setFields(
      {
        name: bold(`üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`).toString(),
        value:
          `‚Ä£ –ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${bold(guildsCached)} —Å–µ—Ä–≤–µ—Ä–∞—Ö.\n` +
          `‚Ä£ –ë–æ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç ${bold(usersInGuilds)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n` +
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          `‚Ä£ –†–µ—Å—Ç–∞—Ä—Ç –±—ã–ª: ${time(client.readyAt!, 'R')}.`,
        inline: true,
      },
      {
        name: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        value:
          `‚Ä£ Web-—Å–µ—Ä–≤–µ—Ä: ${
            ngrok.getUrl() ? bold('–†–∞–±–æ—Ç–∞–µ—Ç!') : bold('–í—ã–∫–ª—é—á–µ–Ω!')
          }\n` +
          `‚Ä£ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: –ó–∞–≥—Ä—É–∑–∫–∞...\n` +
          `‚Ä£ –†–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª: <t:${
            Math.floor(Date.now() / 1000) - os.uptime()
          }:R>`,
        inline: true,
      }
    )
    .setImage(`attachment://${imgForEmbed.name}`)
    .setFooter({
      text: `‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: –ó–∞–≥—Ä—É–∑–∫–∞...; ü™Ñ –ü–∏–Ω–≥: –ó–∞–≥—Ä—É–∑–∫–∞...`,
    });

  const statusMsg = await interaction.reply({
    embeds: [statusEmbed],
    files: [imgForEmbed],
    components: [buttonsRow],
    fetchReply: true,
  });

  const lastestCommitId = await axios({
    baseURL: 'https://api.github.com/',
    url: config.GITHUB_BRANCH_URL,
  }).then((result) => result.data.sha as string);

  if (statusEmbed && statusEmbed.data && statusEmbed.data.fields) {
    statusEmbed.data.fields[1].value =
      `‚Ä£ Web-—Å–µ—Ä–≤–µ—Ä: ${
        ngrok.getUrl() ? bold('–†–∞–±–æ—Ç–∞–µ—Ç!') : bold('–í—ã–∫–ª—é—á–µ–Ω!')
      }\n` +
      `‚Ä£ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: ${inlineCode(lastestCommitId.slice(0, 7))}\n` +
      `‚Ä£ –†–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª: <t:${
        Math.floor(Date.now() / 1000) - os.uptime()
      }:R>`;
  }

  const totalPing = statusMsg.createdTimestamp - interaction.createdTimestamp;
  const usedMemory =
    (((os.totalmem() - os.freemem()) / os.totalmem()) * 100).toFixed(2) + '%';

  statusEmbed.setFooter({
    text: `‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: ${usedMemory}; ü™Ñ –ü–∏–Ω–≥: ${totalPing}–º—Å`,
  });
  await interaction.editReply({
    embeds: [statusEmbed],
    files: [imgForEmbed],
    components: [buttonsRow],
  });
}
